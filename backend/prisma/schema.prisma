// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change this to your preferred database provider
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  fullname         String
  email            String     @unique
  password         String
  email_verified   Boolean    @default(false)
  account_type     String     @default(user)
  account_token    String?
  reset_token      String?
  profile_picture  String?
  bio              String?
  account_balance  Float?     @default(0)
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  
  // Relations
  events           Event[]    @relation("UserEvents")
  attendances      Attendee[] @relation("UserAttendees")
  categories       Category[] @relation("UserCategories")
  orders           Order[]    @relation("UserOrders")
  sessions         Session[]  @relation("UserSessions")
}

model Event {
  id                Int        @id @default(autoincrement())
  user_id           Int
  title             String
  description       String
  schedule_type     String     @default("one-time")
  schedule_details  String?
  capacity          String?
  category          String?
  
  // Relations
  user              User         @relation("UserEvents", fields: [user_id], references: [id])
  tickets           Ticket[]     @relation("EventTickets")
  attendees         Attendee[]   @relation("EventAttendees")
  categories        Category[]   @relation("EventCategories")
  orders            Order[]      @relation("EventOrders")
  images            EventImage[] @relation("EventImages")
}

model EventImage {
  id          Int      @id @default(autoincrement())
  event_id    Int
  image_url   String
  description String?

  // Relations
  event       Event    @relation("EventImages", fields: [event_id], references: [id])
}

model EventSchedule {
  id                Int        @id @default(autoincrement())
  event_id          Int        
  day               String
  start_time        String
  end_time          String
  comment           String
  location_type     String?
  location_details  String?
  
  // Relations
  event              Event       @relation("EventAgenda", fields: [event_id], references: [id])
}

model Agenda {
  id                Int        @id @default(autoincrement())
  event_id          Int        
  name              String
  description       String?
  speakers          String?
  time              String?
  
  // Relations
  event              Event       @relation("EventAgenda", fields: [event_id], references: [id])
}

model Ticket {
  id             Int        @id @default(autoincrement())
  event_id       Int
  ticket_type    String
  ticket_name    String
  is_free        Boolean    @default(false)
  description    String?
  price          Float?
  quantity       Int?
  
  // Relations
  event          Event      @relation("EventTickets", fields: [event_id], references: [id])
  attendees      Attendee[] @relation("TicketAttendees")
  orderItems     OrderItem[] @relation("TicketOrderItems")
}

model Attendee {
  id          Int       @id @default(autoincrement())
  user_id     Int
  event_id    Int
  ticket_id   Int?
  comment     String?
  
  // Relations
  user        User      @relation("UserAttendees", fields: [user_id], references: [id])
  event       Event     @relation("EventAttendees", fields: [event_id], references: [id])
  ticket      Ticket?   @relation("TicketAttendees", fields: [ticket_id], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  user_id     Int
  event_id    Int
  comment     String?
  
  // Relations
  user        User      @relation("UserCategories", fields: [user_id], references: [id])
  event       Event     @relation("EventCategories", fields: [event_id], references: [id])
}

model Order {
  id            Int         @id @default(autoincrement())
  user_id       Int
  event_id      Int
  order_number  String      @unique
  total_price   Float
  status        String
  
  // Relations
  user          User        @relation("UserOrders", fields: [user_id], references: [id])
  event         Event       @relation("EventOrders", fields: [event_id], references: [id])
  orderItems    OrderItem[] @relation("OrderItems")
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  order_id    Int
  ticket_id   Int
  quantity    Int
  unit_price  Float
  total_price Float
  
  // Relations
  order       Order     @relation("OrderItems", fields: [order_id], references: [id])
  ticket      Ticket    @relation("TicketOrderItems", fields: [ticket_id], references: [id])
}

model Favourite {
  id          Int       @id @default(autoincrement())
  user_id     Int
  event_id    Int
  comment     String?
  
  // Relations
  user        User      @relation("UserAttendees", fields: [user_id], references: [id])
  event       Event     @relation("EventAttendees", fields: [event_id], references: [id])
}

model Session {
  id          Int       @id @default(autoincrement())
  user_id     Int
  token       String    @unique
  is_active   Boolean   @default(true) // I interpreted "isInUdness" as "is_active"
  user_agent  String?
  expires_at  DateTime
  
  // Relations
  user        User      @relation("UserSessions", fields: [user_id], references: [id])
}